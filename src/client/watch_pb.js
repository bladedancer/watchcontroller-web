/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var apicentral_pb = require('./apicentral_pb.js');
goog.exportSymbol('proto.central.events.v1.Event', null, global);
goog.exportSymbol('proto.central.events.v1.Event.Type', null, global);
goog.exportSymbol('proto.central.events.v1.EventMeta', null, global);
goog.exportSymbol('proto.central.events.v1.Organization', null, global);
goog.exportSymbol('proto.central.events.v1.Request', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.central.events.v1.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.central.events.v1.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.central.events.v1.Request.displayName = 'proto.central.events.v1.Request';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.central.events.v1.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.central.events.v1.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.central.events.v1.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.central.events.v1.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    selflink: jspb.Message.getFieldWithDefault(msg, 1, ""),
    token: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.central.events.v1.Request}
 */
proto.central.events.v1.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.central.events.v1.Request;
  return proto.central.events.v1.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.central.events.v1.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.central.events.v1.Request}
 */
proto.central.events.v1.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSelflink(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.central.events.v1.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.central.events.v1.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.central.events.v1.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.central.events.v1.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSelflink();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string selfLink = 1;
 * @return {string}
 */
proto.central.events.v1.Request.prototype.getSelflink = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.central.events.v1.Request.prototype.setSelflink = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string token = 2;
 * @return {string}
 */
proto.central.events.v1.Request.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.central.events.v1.Request.prototype.setToken = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.central.events.v1.Event = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.central.events.v1.Event, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.central.events.v1.Event.displayName = 'proto.central.events.v1.Event';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.central.events.v1.Event.prototype.toObject = function(opt_includeInstance) {
  return proto.central.events.v1.Event.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.central.events.v1.Event} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.central.events.v1.Event.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    time: jspb.Message.getFieldWithDefault(msg, 2, ""),
    version: jspb.Message.getFieldWithDefault(msg, 3, ""),
    product: jspb.Message.getFieldWithDefault(msg, 4, ""),
    correlationid: jspb.Message.getFieldWithDefault(msg, 5, ""),
    organization: (f = msg.getOrganization()) && proto.central.events.v1.Organization.toObject(includeInstance, f),
    type: jspb.Message.getFieldWithDefault(msg, 7, 0),
    payload: (f = msg.getPayload()) && apicentral_pb.ResourceInstance.toObject(includeInstance, f),
    metadata: (f = msg.getMetadata()) && proto.central.events.v1.EventMeta.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.central.events.v1.Event}
 */
proto.central.events.v1.Event.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.central.events.v1.Event;
  return proto.central.events.v1.Event.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.central.events.v1.Event} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.central.events.v1.Event}
 */
proto.central.events.v1.Event.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTime(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setVersion(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setProduct(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setCorrelationid(value);
      break;
    case 6:
      var value = new proto.central.events.v1.Organization;
      reader.readMessage(value,proto.central.events.v1.Organization.deserializeBinaryFromReader);
      msg.setOrganization(value);
      break;
    case 7:
      var value = /** @type {!proto.central.events.v1.Event.Type} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 8:
      var value = new apicentral_pb.ResourceInstance;
      reader.readMessage(value,apicentral_pb.ResourceInstance.deserializeBinaryFromReader);
      msg.setPayload(value);
      break;
    case 9:
      var value = new proto.central.events.v1.EventMeta;
      reader.readMessage(value,proto.central.events.v1.EventMeta.deserializeBinaryFromReader);
      msg.setMetadata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.central.events.v1.Event.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.central.events.v1.Event.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.central.events.v1.Event} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.central.events.v1.Event.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTime();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getVersion();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getProduct();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getCorrelationid();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getOrganization();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.central.events.v1.Organization.serializeBinaryToWriter
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      7,
      f
    );
  }
  f = message.getPayload();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      apicentral_pb.ResourceInstance.serializeBinaryToWriter
    );
  }
  f = message.getMetadata();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.central.events.v1.EventMeta.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.central.events.v1.Event.Type = {
  CREATED: 0,
  UPDATED: 1,
  DELETED: 2,
  SUBRESOURCEUPDATED: 3
};

/**
 * optional string id = 1;
 * @return {string}
 */
proto.central.events.v1.Event.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.central.events.v1.Event.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string time = 2;
 * @return {string}
 */
proto.central.events.v1.Event.prototype.getTime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.central.events.v1.Event.prototype.setTime = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string version = 3;
 * @return {string}
 */
proto.central.events.v1.Event.prototype.getVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.central.events.v1.Event.prototype.setVersion = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string product = 4;
 * @return {string}
 */
proto.central.events.v1.Event.prototype.getProduct = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.central.events.v1.Event.prototype.setProduct = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string correlationId = 5;
 * @return {string}
 */
proto.central.events.v1.Event.prototype.getCorrelationid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.central.events.v1.Event.prototype.setCorrelationid = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional Organization organization = 6;
 * @return {?proto.central.events.v1.Organization}
 */
proto.central.events.v1.Event.prototype.getOrganization = function() {
  return /** @type{?proto.central.events.v1.Organization} */ (
    jspb.Message.getWrapperField(this, proto.central.events.v1.Organization, 6));
};


/** @param {?proto.central.events.v1.Organization|undefined} value */
proto.central.events.v1.Event.prototype.setOrganization = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.central.events.v1.Event.prototype.clearOrganization = function() {
  this.setOrganization(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.central.events.v1.Event.prototype.hasOrganization = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional Type type = 7;
 * @return {!proto.central.events.v1.Event.Type}
 */
proto.central.events.v1.Event.prototype.getType = function() {
  return /** @type {!proto.central.events.v1.Event.Type} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {!proto.central.events.v1.Event.Type} value */
proto.central.events.v1.Event.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 7, value);
};


/**
 * optional datamodel.ResourceInstance payload = 8;
 * @return {?proto.central.events.v1.datamodel.ResourceInstance}
 */
proto.central.events.v1.Event.prototype.getPayload = function() {
  return /** @type{?proto.central.events.v1.datamodel.ResourceInstance} */ (
    jspb.Message.getWrapperField(this, apicentral_pb.ResourceInstance, 8));
};


/** @param {?proto.central.events.v1.datamodel.ResourceInstance|undefined} value */
proto.central.events.v1.Event.prototype.setPayload = function(value) {
  jspb.Message.setWrapperField(this, 8, value);
};


proto.central.events.v1.Event.prototype.clearPayload = function() {
  this.setPayload(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.central.events.v1.Event.prototype.hasPayload = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional EventMeta metadata = 9;
 * @return {?proto.central.events.v1.EventMeta}
 */
proto.central.events.v1.Event.prototype.getMetadata = function() {
  return /** @type{?proto.central.events.v1.EventMeta} */ (
    jspb.Message.getWrapperField(this, proto.central.events.v1.EventMeta, 9));
};


/** @param {?proto.central.events.v1.EventMeta|undefined} value */
proto.central.events.v1.Event.prototype.setMetadata = function(value) {
  jspb.Message.setWrapperField(this, 9, value);
};


proto.central.events.v1.Event.prototype.clearMetadata = function() {
  this.setMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.central.events.v1.Event.prototype.hasMetadata = function() {
  return jspb.Message.getField(this, 9) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.central.events.v1.EventMeta = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.central.events.v1.EventMeta, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.central.events.v1.EventMeta.displayName = 'proto.central.events.v1.EventMeta';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.central.events.v1.EventMeta.prototype.toObject = function(opt_includeInstance) {
  return proto.central.events.v1.EventMeta.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.central.events.v1.EventMeta} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.central.events.v1.EventMeta.toObject = function(includeInstance, msg) {
  var f, obj = {
    watchtopicid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    watchtopicselflink: jspb.Message.getFieldWithDefault(msg, 2, ""),
    sequenceid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    subresource: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.central.events.v1.EventMeta}
 */
proto.central.events.v1.EventMeta.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.central.events.v1.EventMeta;
  return proto.central.events.v1.EventMeta.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.central.events.v1.EventMeta} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.central.events.v1.EventMeta}
 */
proto.central.events.v1.EventMeta.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setWatchtopicid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setWatchtopicselflink(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSequenceid(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setSubresource(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.central.events.v1.EventMeta.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.central.events.v1.EventMeta.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.central.events.v1.EventMeta} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.central.events.v1.EventMeta.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWatchtopicid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getWatchtopicselflink();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSequenceid();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getSubresource();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string watchTopicID = 1;
 * @return {string}
 */
proto.central.events.v1.EventMeta.prototype.getWatchtopicid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.central.events.v1.EventMeta.prototype.setWatchtopicid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string watchTopicSelfLink = 2;
 * @return {string}
 */
proto.central.events.v1.EventMeta.prototype.getWatchtopicselflink = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.central.events.v1.EventMeta.prototype.setWatchtopicselflink = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int64 sequenceID = 3;
 * @return {number}
 */
proto.central.events.v1.EventMeta.prototype.getSequenceid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.central.events.v1.EventMeta.prototype.setSequenceid = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string subresource = 4;
 * @return {string}
 */
proto.central.events.v1.EventMeta.prototype.getSubresource = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.central.events.v1.EventMeta.prototype.setSubresource = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.central.events.v1.Organization = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.central.events.v1.Organization, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.central.events.v1.Organization.displayName = 'proto.central.events.v1.Organization';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.central.events.v1.Organization.prototype.toObject = function(opt_includeInstance) {
  return proto.central.events.v1.Organization.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.central.events.v1.Organization} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.central.events.v1.Organization.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.central.events.v1.Organization}
 */
proto.central.events.v1.Organization.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.central.events.v1.Organization;
  return proto.central.events.v1.Organization.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.central.events.v1.Organization} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.central.events.v1.Organization}
 */
proto.central.events.v1.Organization.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.central.events.v1.Organization.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.central.events.v1.Organization.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.central.events.v1.Organization} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.central.events.v1.Organization.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.central.events.v1.Organization.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.central.events.v1.Organization.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


goog.object.extend(exports, proto.central.events.v1);
